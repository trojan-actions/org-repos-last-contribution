(()=>{var __webpack_modules__={705:module=>{module.exports=eval("require")("@actions/core")},628:module=>{module.exports=eval("require")("@actions/github")},466:module=>{module.exports=eval("require")("@actions/github/lib/utils")},808:module=>{module.exports=eval("require")("@octokit/plugin-retry.js")},417:module=>{module.exports=eval("require")("@octokit/plugin-throttling")},197:module=>{module.exports=eval("require")("array-sort")},380:module=>{module.exports=eval("require")("csv-stringify/lib/sync")}};var __webpack_module_cache__={};function __nccwpck_require__(e){var t=__webpack_module_cache__[e];if(t!==undefined){return t.exports}var r=__webpack_module_cache__[e]={exports:{}};var o=true;try{__webpack_modules__[e](r,r.exports,__nccwpck_require__);o=false}finally{if(o)delete __webpack_module_cache__[e]}return r.exports}if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=__dirname+"/";var __webpack_exports__={};(()=>{const e=__nccwpck_require__(705);const t=__nccwpck_require__(628);const r=__nccwpck_require__(380);const o=__nccwpck_require__(197);const{GitHub:n}=__nccwpck_require__(466);const{retry:a}=__nccwpck_require__(808);const{throttling:s}=__nccwpck_require__(417);const i=n.plugin(s,a);const u=require(process.env.GITHUB_EVENT_PATH);const c=e.getInput("token",{required:true});const _=e.getInput("org",{required:false})||u.organization.login;let l;const p=new i({auth:c,request:{retries:3,retryAfter:180},throttle:{onRateLimit:(e,t,r)=>{r.log.warn(`Request quota exhausted for request ${t.method} ${t.url}`);if(t.request.retryCount===0){r.log.info(`Retrying after ${e} seconds!`);return true}},onAbuseLimit:(e,t,r)=>{r.log.warn(`Abuse detected for request ${t.method} ${t.url}`)}}});(async()=>{try{let e=null;let t=[];const r=`\nquery ($owner: String!, $cursorID: String) {\n  organization(login: $owner) {\n    repositories(first: 100, after: $cursorID) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        name\n        createdAt\n        primaryLanguage {\n          name\n        }\n        languages(first: 100) {\n          nodes {\n            name\n          }\n        }\n        updatedAt\n        pushedAt\n        diskUsage\n        collaborators(first: 10) {\n          edges {\n            permission\n            node {\n              email\n              name\n              login\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;let o=false;let n=null;do{n=await p.graphql({query:r,owner:_,cursorID:e});const a=n.organization.repositories.nodes;o=n.organization.repositories.pageInfo.hasNextPage;for(const t of a){if(o){e=n.organization.repositories.pageInfo.endCursor}else{e=null}}t=t.concat(a)}while(o);await repoDirector(t)}catch(t){e.setFailed(t.message)}})();async function repoDirector(t){try{let e=[];const t=repos.filter((e=>e));t.forEach((t=>{const r=t.name;const o=t.pushedAt;const n=t.updatedAt;const a=t.primaryLanguage.name;const s=t.createdDate;const i=t.diskUsage;const u=[];t.collaborators.forEach((e=>{if(e.collaborators.edges.permission==="ADMIN"){u.push(e.collaborators.edges.node.login)}}));e.push({repoName:r,pushedAt:o,updatedAt:n,createdDate:s,primaryLanguage:a,diskUsage:i,admins:u})}));sortTotals(e)}catch(t){e.setFailed(t.message)}}async function sortTotals(n){try{const a={repoName:"Repository",pushedAt:`last pushed`,updatedAt:`last updated`,createdDate:"Repo creation date",primaryLanguage:"Primary language",diskUsage:"Disk usage",admins:"Admins"};const s=e.getInput("sort",{required:false})||"additions";const i=o(n,s,{reverse:true});i.unshift(a);const u=r(i,{});const c=`reports/${_}-${(new Date).toISOString().substring(0,19)+"Z"}-${l}.csv`;const d=e.getInput("committer-name",{required:false})||"github-actions";const g=e.getInput("committer-email",{required:false})||"github-actions@github.com";const{owner:m,repo:f}=t.context.repo;const b={owner:m,repo:f,path:c,message:`${(new Date).toISOString().slice(0,10)} Git audit-log report`,content:Buffer.from(u).toString("base64"),committer:{name:d,email:g}};console.log(`Pushing final CSV report to repository path: ${c}`);await p.rest.repos.createOrUpdateFileContents(b)}catch(t){e.setFailed(t.message)}}})();module.exports=__webpack_exports__})();